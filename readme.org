#+title: dino

A monorepo with Godot games and addons.
Play the latest version here: [[https://russmatney.itch.io/dino][russmatney.itch.io/dino]]

'Dino' sort of comes from 'demo', but with some personality and a cast of characters to pull from.

Working in a monorepo decreases overhead for creating and sharing new ideas and
tools across games. This repo is a sandbox for experimenting with new game and
addon ideas.

* Games
** Runner
Play the latest version here: [[https://russmatney.itch.io/runner][russmatney.itch.io/runner]]

A catch-the-leaf inspired running game.

The code is all in ~src/runner/*~ - the ~ThePark~ scene is the original, but
you should be able to toy with individual rooms in the ~src/runner/gyms~ as well.

The core of the logic is the Runner.gd script, which handles adding and removing
rooms while the player moves across them until they are all complete.
** Dungeon Crawler
Play the latest version here: [[https://russmatney.itch.io/dungeon-crawler][russmatney.itch.io/dungeon-crawler]]

Part of my classic-game-clones adventure, in which I'm creating basic prototypes
modeled after classic genres and games.

See ~src/dungeonCrawler/*~ for the code.

This was a chance to implement keys and door logic, and a basic boss state
machine. The map is one giant scene, and the tiles use auto-tiling, which should
make it simple to doodle a few more levels.
** Ghosts
Play the latest version here: [[https://russmatney.itch.io/ghosts][russmatney.itch.io/ghosts]]

A small something created for the [[https://itch.io/jam/godot-wild-jam-52][Godot Wild Jam #52]].

See ~src/ghosts/*~ for the code.
* Addons
These addons are intended to speed up prototyping and game-jam workflows, but should
also be useful in larger, long-running projects.

Note that cross-dependencies between these addons is not yet solved - i.e. if
you add 'navi', you will have trouble unless you also add 'core', 'trolley', and
'dj', b/c the 'navi' code expects to use fonts/autoloads from those addons. I
hope to resolve this dependency issue in ~bb-godot~'s install-addons flow.

** core
A Util autoload and a slew of fonts.
** beehive
For working with state machines, behavior trees, maybe GOAP
*** basic state machine abstraction
** trolley
For handling controls inputs and remapping.
*** Trolley autoload with ~move_dir()~ helpers
returns a normalized vector according to ~move_{left,up,right,down}~ input actions
** navi
Basic menus, pausing, and credits, plus a scene loader for navigating between
them all.
*** NaviMenu
supporting ~add_menu_item({label: "Blah", obj: self, method: "some_func"})~
** dj
For sounds and music management, such as background music that is maintained
across scene transitions.
** reptile
Tools scripts and ui to improve on Godot's TileSet UI gap.
Includes some basic auto-tiles to speed up prototyping.
** thanks
A simple Credits scene and/or script that scrolls credits from a .txt file
* bb-godot
Utilities for managing Godot Projects using Babashka (Clojure)

- auto-exporting from aseprite
- building a local web build
- deploying to s3
- installing addons from github

** ~bb watch~
A file watcher that runs other commands, which for now is just ~bb pixels~.
** ~bb pixels~: Aseprite export
and exports *.aesprite files as pngs, using the aseprite
binary.
** ~bb addons~
An quick status check for your addons-map
** ~bb install-addons~
#+begin_quote
NOTE: at this point I've moved to vendorizing the deps completely within the
project, to avoid burdening other folks with cloning/installing these deps to
get Dino to run. These commands might still be useful in some cases, but are not
required to run the project.
#+end_quote

An approximation of a dependency manager.

Clones and symlinks godot addons, using a clojure map as the manifest

Here's a bit of the current bb.edn for this project

#+begin_src clojure
{:tasks
 {:requires ([bb-godot.tasks :as tasks])

  install-addons
  (tasks/install-addons
    {:behavior_tree :kagenash1/godot-behavior-tree
     :gut           :bitwes/Gut})}}
#+end_src

A project consuming some of dino's addons (plus GUT) might look like:

#+begin_src clojure
{:tasks
 {:requires ([bb-godot.tasks :as tasks])

  install-addons
  (tasks/install-addons
    {:gut           :bitwes/Gut
     :navi          :russmatney/dino
     :dj            :russmatney/dino
     :trolley       :russmatney/dino
     :core          :russmatney/dino
     :reptile       :russmatney/dino
     :beehive       :russmatney/dino})}}
#+end_src

** ~bb install-script-templates~
Copy templates from external paths into your project

I needed this one time, tho it seems like addons should do this themselves?
Maybe going through the asset library works that way?
** ~bb build-web~: Build project for web
Build your project, for web.

Builds using godot's HTML5 template, in the ~./dist~ directory.
** ~bb deploy-web <s3-bucket>~: Deploy project to s3
Deploy a project to an s3 bucket.

Depends on a working and logged-in ~aws~ cli tool.
** ~bb zip~: Zip project
zip the ~./dist~ dir into a ~dist.zip~, which can be uploaded to itch.io
